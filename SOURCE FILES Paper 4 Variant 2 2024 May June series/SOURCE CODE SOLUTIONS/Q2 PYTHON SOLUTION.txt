class Node:
    def __init__(self, data):
        self.data = data
        self.left_pointer = -1
        self.right_pointer = -1

    def get_left(self):
        return self.left_pointer

    def get_right(self):
        return self.right_pointer

    def get_data(self):
        return self.data

    def set_left(self, left_pointer):
        self.left_pointer = left_pointer

    def set_right(self, right_pointer):
        self.right_pointer = right_pointer

    def set_data(self, data):
        self.data = data

class TreeClass:
    def __init__(self):
        self.tree = [Node(-1) for _ in range(20)]
        self.first_node = -1
        self.number_nodes = 0

    def insert_node(self, new_node):
        if self.number_nodes == 0:
            self.tree[self.number_nodes] = new_node
            self.first_node = 0
        else:
            current_index = self.first_node
            while True:
                if new_node.get_data() < self.tree[current_index].get_data():
                    if self.tree[current_index].get_left() == -1:
                        self.tree[current_index].set_left(self.number_nodes)
                        break
                    else:
                        current_index = self.tree[current_index].get_left()
                else:
                    if self.tree[current_index].get_right() == -1:
                        self.tree[current_index].set_right(self.number_nodes)
                        break
                    else:
                        current_index = self.tree[current_index].get_right()
            self.tree[self.number_nodes] = new_node
        self.number_nodes += 1

    def output_tree(self):
        if self.number_nodes == 0:
            print("No nodes")
        else:
            for i in range(self.number_nodes):
                node = self.tree[i]
                print(f"Node {i}: Left={node.get_left()}, Data={node.get_data()}, Right={node.get_right()}")

if __name__ == "__main__":
    the_tree = TreeClass()
    
    values_to_insert = [10, 11, 5, 1, 20, 7, 15]
    
    for value in values_to_insert:
        the_tree.insert_node(Node(value))
    
    the_tree.output_tree()